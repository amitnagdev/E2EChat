'use strict';

/***********************************
 *** START ~ Module dependencies ***
 ***********************************/

// Global dependencies
const _ = require('lodash'),
    fs = require('fs'),
    path = require('path'),
    chalk = require('chalk');

// Project dependencies
const ssl = require('./lib/ssl'),
    db = require('./lib/db'),
    settingsCfg = require('./settings'),
    pkg = require(path.resolve('./package.json'));


/***********************************
 *** END ~ Module dependencies ***
 ***********************************/

let e2e = {};

exports.init = (appSettings, next) => {
    const settings = settingsCfg(appSettings);
    const init = require('./lib/init')(settings);
    const config = e2e.config = require('./lib/config')(settings);

    if (!e2e.app) {
        // Prevent NodeJS app crash
        process.on('uncaughtException', function (err) {
            console.log(chalk.red(err.stack));
        });

        // Bootstrap db connection
        let options = ssl.getMongoSettings(config, settings);
        let connectDB = (cb) => {
            let dbUrl = (config.db && config.db.url) || process.env.MONGO_URL || settings.mongoUrl;
            if(dbUrl) {
                db.connect(config.db.url, options, settings.maxDbConnectionRetry, (err, conn) => {
                    if(!err) {
                        cb(conn);
                    }
                });
            } else {
                cb();
            }
        };

        connectDB((dbConn) => {
            // Init the express application
            let app = e2e.app = require('./lib/express')(dbConn, config, settings);

            config.port = config.port || process.env.PORT || settings.port || 3000;
        
            // Start the app by listening on <port>
            app.listen(config.port, (err) => {
                if(err) {
                    console.log(chalk.red(err));
                } else {
                    // Logging initialization
                    console.log(`${pkg.name || 'App'} [Ver ${pkg.version}] started on port ${config.port}.`);
                    next({
                        app: app,
                        config: config
                    });
                }
            });
        });        
    }
};

exports.config = () => e2e.config;