'use strict';

/***********************************
 *** START ~ Module dependencies ***
 ***********************************/

// Global dependencies
const _ = require('lodash'),
    glob = require('glob'),
    chalk = require('chalk');

/***********************************
 *** END ~ Module dependencies ***
 ***********************************/

const getGlobbedFiles = (globPatterns, removeRoot) => {
    // URL paths regex
    let urlRegex = new RegExp('^(?:[a-z]+:)?\/\/', 'i');

    // The output array
    let output = [];

    // If glob pattern is array so we use each pattern in a recursive way, otherwise we use glob 
    if (_.isArray(globPatterns)) {
        globPatterns.forEach((globPattern) => {
            output = _.union(output, getGlobbedFiles(globPattern, removeRoot));
        });
    } else if (_.isString(globPatterns)) {
        if (urlRegex.test(globPatterns)) {
            output.push(globPatterns);
        } else {
            let files = glob.sync(globPatterns);
            
            if (removeRoot) {
                files = files.map((file) => {
                    return file.replace(removeRoot, '');
                });
            }

            output = _.union(output, files);
        }
    }

    return output;
};

/**
 * Get files by glob patterns
 */
exports.getGlobbedFiles = getGlobbedFiles;

/**
 * Get the modules JavaScript files
 */
exports.getJavaScriptAssets = (config, includeTests) => {
    let output = getGlobbedFiles(config.assets.lib.js.concat(config.assets.js), 'public/');

    // To include tests
    if (includeTests) {
        output = _.union(output, getGlobbedFiles(config.assets.tests));
    }

    return output;
};

/**
 * Get the modules CSS files
 */
exports.getCSSAssets = (config) => {
    let output = getGlobbedFiles(config.assets.lib.css.concat(config.assets.css), 'public/');
    return output;
};