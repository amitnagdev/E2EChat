'use strict';

/***********************************
 *** START ~ Module dependencies ***
 ***********************************/

// Global dependencies
const path = require('path'),
    helmet = require('helmet'),
    cors = require('cors'),
    xssFilters = require('xss-filters');

/***********************************
 *** END ~ Module dependencies ***
 ***********************************/

const sanitize = (data) => {
    if (data) {
        Object.keys(data).forEach((key) => {
            if (typeof data[key] === 'object') {
                sanitize(data[key]);
            } else {
                if (typeof data[key] === 'string') {
                    data[key] = xssFilters.inHTMLData(data[key]).trim();
                }
            }
        });
    }
};

exports.protectHeader = (app, settings) => {
    // Use helmet to secure Express headers

    // Implement X-Frame-Options: Deny
    app.use(helmet.frameguard());
    // Implement X-XSS-Protection: 1; mode=block
    app.use(helmet.xssFilter());
    app.use(helmet.noSniff());
    app.use(helmet.ieNoOpen());
    // Hide/set X-Powered-By
    //app.use(helmet.hidePoweredBy());
    app.use(helmet.hidePoweredBy({ setTo: settings.poweredBy }));

    //app.disable('x-powered-by');

    // Implement Strict-Transport-Security
    //app.use(helmet.hsts({
    //    maxAge: 7776000000,
    //    includeSubdomains: true
    //}));
};

exports.cors = (app, config) => {
    // Cross origin resource sharing access
    let whitelist = [(config.siteHost || '').toLowerCase()];
    let corsOptions = {
        origin: (origin, callback) => {
            let originIsWhitelisted = whitelist.indexOf((origin || '').toLowerCase()) !== -1;
            callback(null, originIsWhitelisted);
        }
    };

    app.use(cors(corsOptions));

    // Enable pre-flight request for cors DELETE verbs
    //app.options('*', cors());
};

exports.sanitize = sanitize;

exports.applyBlacklist = (data, settings) => {
    if (settings.blacklistFile) {
        let blacklists = require(path.resolve(settings.blacklistFile));
        for(let blacklist of blacklists) {
            if (blacklist) {
                delete data[blacklist];
            }
        }
    }
};