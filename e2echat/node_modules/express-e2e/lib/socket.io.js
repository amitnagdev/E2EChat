'use strict';

/***********************************
 *** START ~ Module dependencies ***
 ***********************************/

// Global dependencies
const path = require('path');

// Project dependencies
const helper = require('./helper');


/***********************************
 *** END ~ Module dependencies ***
 ***********************************/

module.exports = (app, settings) => {
    if (app && settings && settings.socketIOFiles) {
        let socketIO = require('socket.io');
        let routesProtector = require('./protect.routes');
        let io = socketIO(app);

        if (io) {
            let keyRef = 'userId';
            // Middleware to authenticate socket.io connections
            const authenticate = (socket, next) => {
                routesProtector.authenticateSocket(socket.handshake.headers.cookie, socket.handshake.query, (err, token) => {
                    if (err) {
                        next(new Error(err));
                    } else {
                        socket[keyRef] = token[keyRef];
                        next();
                    }
                });
            };

            // Generic method to broadcast client messages
            const broadcast = (sio, socketIds, channel, data) => {
                if (sio && socketIds && data[keyRef]) {
                    let ids = socketIds[data[keyRef]];
                    if (ids) {
                        for(let id of ids) {
                            sio.to(id).emit(channel, data);
                        }
                    }
                }
            };

            // Globbing socket.io files to initialize different kind of socket.io implementations
            helper.getGlobbedFiles(settings.socketIOFiles).forEach((socket) => {
                require(path.resolve(socket)).init(io, authenticate, broadcast, keyRef);
            });
        }
    }
};