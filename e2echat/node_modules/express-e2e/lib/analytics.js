'use strict';

/***********************************
 *** START ~ Module dependencies ***
 ***********************************/

// Global dependencies
const _ = require('lodash'),
    S = require('string'),
    path = require('path'),
    os = require('os'),
    onFinished = require('on-finished'),
    onHeaders = require('on-headers'),
    ua = require('universal-analytics'),
    uuid = require('node-uuid');

// Project dependencies
const cookieUtil = require('./utils/cookie');

/***********************************
 *** END ~ Module dependencies ***
 ***********************************/

const canBeTracked = (req, routesWhiteListed) => {
    if (req.method.toUpperCase() === 'OPTIONS') {
        return false;
    }

    let path = req.path;
    let whiteListed = false, index = 0;

    while (!whiteListed && index < routesWhiteListed.length) {
        whiteListed = S(path).startsWith(routesWhiteListed[index++]);
    }

    return !whiteListed;
};

exports.log = (app, config, settings) => {
    if(settings.ga && settings.ga.url) {
        let field = '_startedAt', gaCookie = config.ga.cookie;
        let gaUrl = settings.ga.url;

        const recordStartTime = (obj) => {
            return () => {
                obj[field] = process.hrtime();
            };
        };

        const calculateResponseTime = (req, res, digits) => {
            if (!req[field] || !res[field]) {
                // Missing request and/or response start time
                return;
            }

            // Calculate diff
            let ms = ((res[field][0] - req[field][0]) * 1e3) + ((res[field][1] - req[field][1]) * 1e-6);

            // Return truncated value
            return ms.toFixed(digits === undefined ? 3 : digits);// + ' ms';
        };

        const log = (req) => {
            let logs = '_logs';
            return (msg) => {
                req[logs] = req[logs] || [];

                if (_.isObject(msg)) {
                    req[logs].push(msg);
                } else if (config.ga.debug) {
                    req[logs].push({
                        type: 'log',
                        msg: msg
                    });
                }
            };
        };

        if (config.ga.track) {
            app.use((req, res, next) => {
                if (canBeTracked(req, settings.ga.routesWhiteListed)) {
                    let hasAnalyticsCookie = false;

                    const setCidInSession = (cid) => {
                        req.session = req.session || {};
                        req.session.cid = cid;
                    };

                    if (req.cookies && req.cookies[gaCookie]) {
                        hasAnalyticsCookie = true;
                        setCidInSession(req.cookies[gaCookie]);
                    }

                    if (!hasAnalyticsCookie) {
                        let cid = uuid.v4();
                        cookieUtil.createSessionCookie(req, res, gaCookie, cid);
                        setCidInSession(cid);
                    }
                }

                next();
            });

            app.use(ua.middleware(config.ga.trackingId));
        }

        return (req, res, next) => {
            const logRequest = () => {
                // Server Response Time
                let srt = calculateResponseTime(req, res);
                let path = req.path, referer = req.headers.referer || req.headers.referrer, title = 'iiWebi', reqType;

                if (req.visitor) {
                    let logAnalytics = true;
                    if (S(path).startsWith(gaUrl)) {
                        if (req.body.referer) {
                            referer = req.body.referer;
                            path = path.replace(gaUrl, '');
                            reqType = 'page';
                        } else {
                            logAnalytics = false;
                        }
                    }

                    if (logAnalytics) {
                        let udata = {
                            dp: path,                                               // Document Path
                            dt: title,                                              // Document Title
                            dh: req.uri,                                            // Document Host
                            dr: referer,                                            // Document Referrer
                            uip: req.ipAddress,                                     // User IP
                            ua: req.headers['user-agent'],                          // User Agent
                            srt: srt,                                               // Server Response Time
                            exd: res.statusCode === 500 ? res.error : ''            // Exception Description
                        };

                        if (!reqType) {
                            if (req.headers.accept.indexOf('text/html') > -1) {
                                reqType = 'page';
                            } else if (req.headers.accept.indexOf('application/json') > -1) {
                                reqType = 'api';
                            }
                        }

                        let svcParams = {
                            userId: req.userId,
                            host: req.uri,
                            path: path,
                            method: req.method,
                            referer: referer,
                            ip: req.ipAddress,
                            userAgent: req.headers['user-agent'],
                            srt: srt,
                            sessionId: req.session.cid,
                            status: res.statusCode,
                            type: reqType,
                            hostname: os.hostname()
                        };

                        if (res.error) {
                            svcParams.error = res.error;
                        }

                        //logService.log(svcParams);

                        req.visitor
                            .pageview(udata)
                            .send();
                    }
                }
            }

            req.log = log(req);

            if (canBeTracked(req, settings.ga.routesWhiteListed)) {
                // Request data
                req[field] = undefined;
                // Response data
                res[field] = undefined;

                // Record request start
                recordStartTime(req)();

                // Record response start
                onHeaders(res, recordStartTime(res));
                // Log when response finished
                onFinished(res, logRequest);
            }

            next();
        };
    }

    return (req, res, next) => {
        // Empty middleware
        next();
    };
};

exports.registerRoute = (app, settings) => {
    if(settings.ga && settings.ga.url) {
        app.route(settings.ga.url + '/*').post((req, res) => {
            res.json({});
        });
    }
};