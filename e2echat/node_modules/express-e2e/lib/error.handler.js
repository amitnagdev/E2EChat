'use strict';

/***********************************
 *** START ~ Module dependencies ***
 ***********************************/

// Global dependencies


// Project dependencies


/***********************************
 *** END ~ Module dependencies ***
 ***********************************/

/**
 * Get unique error field name
 */
const getUniqueErrorMessage = (err) => {
    let output = {};
    let error = 'error';

    try {
        let fieldName = err.err.substring(err.err.lastIndexOf('.$') + 2, err.err.lastIndexOf('_1'));
        output[fieldName] = fieldName.charAt(0).toUpperCase() + fieldName.slice(1) + ' already exists';

    } catch (ex) {
        output[error] = 'Unique field already exists';
    }

    return output;
};

const isEmptyObject = (obj) => {
    // null and undefined are "empty"
    if (!obj) {
        return true;
    }

    // Assume if it has a length property with a non-zero value
    // that that property is correct.
    if (obj.length && obj.length > 0) {
        return false;
    }

    if (obj.length === 0) {
        return true;
    }

    // Otherwise, does it have any properties of its own?
    // Note that this doesn't handle
    // toString and toValue enumeration bugs in IE < 9
    for (let key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            return false;
        }
    }

    return true;
}

/**
 * Get the error message from error object
 */
exports.getErrorMessage = (err) => {
    let message = {};
    let error = 'error';

    if (err.code) {
        switch (err.code) {
            case 11000:
            case 11001:
                message = getUniqueErrorMessage(err);
                break;
            default:
                message[error] = 'Something went wrong - ' + err;
        }
    } else if (err.errors) {
        for (let errName in err.errors) {
            if (err.errors[errName].message) {
                message[errName] = err.errors[errName].message;
            }
        }
    } else if (err.message) {
        message[error] = err.message;
    }

    return isEmptyObject(message) ? err : message;
};