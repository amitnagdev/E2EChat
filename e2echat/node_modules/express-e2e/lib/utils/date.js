'use strict';

/***********************************
 *** START ~ Module dependencies ***
 ***********************************/

// Global dependencies


// Project dependencies



/***********************************
 *** END ~ Module dependencies ***
 ***********************************/

const isNumber = (num) => {
    if (num === 0) {
        return true;
    }

    return num && !isNaN(parseInt(num, 10));
};

const toLocaleDate = (date, args) => {
    return date.toLocaleString('en-au', args);
};

const addYear = (date, years) => {
    if (isNumber(years)) {
        years = parseInt(years, 10);
        if (years !== 0) {
            date.setFullYear(date.getFullYear() + years);
        }
    }
};

const addMonth = (date, months) => {
    if (isNumber(months)) {
        let years = parseInt(months / 12, 10);
        months = parseInt(months % 12, 10);
        if (months !== 0) {
            date.setMonth(date.getMonth() + months);
        }
        addYear(date, years);
    }
};

const addDate = (date, days) => {
    if (isNumber(days)) {
        if (days !== 0) {
            date.setDate(date.getDate() + days);
        }
    }
};

const addHours = (date, hours) => {
    if (isNumber(hours)) {
        let days = parseInt(hours / 24, 10);
        hours = parseInt(hours % 24, 10);
        if (hours !== 0) {
            date.setHours(date.getHours() + hours);
        }
        addDate(date, days);
    }
};

const addMinutes = (date, minutes) => {
    if (isNumber(minutes)) {
        let hours = parseInt(minutes / 60, 10);
        minutes = parseInt(minutes % 60, 10);
        if (minutes !== 0) {
            date.setMinutes(date.getMinutes() + minutes);
        }
        addHours(date, hours);
    }
};

const addSeconds = (date, seconds) => {
    if (isNumber(seconds)) {
        let minutes = parseInt(seconds / 60, 10);
        seconds = parseInt(seconds % 60, 10);
        if (seconds !== 0) {
            date.setSeconds(date.getSeconds() + seconds);
        }
        addMinutes(date, minutes);
    }
};

const calculateMonthsDiff = (dateFrom, dateTo, isBusiness) => {
    let months = (dateTo.getFullYear() - dateFrom.getFullYear()) * 12;
    months -= dateFrom.getMonth() + 1;
    months += dateTo.getMonth() + 1;

    if (isBusiness && dateTo.getDate() > dateFrom.getDate()) {
        months += 1;
    }

    return months <= 0 ? 0 : months;
};

exports.addYear = addYear;
exports.addMonth = addMonth;
exports.addDate = addDate;
exports.addHours = addHours;
exports.addMinutes = addMinutes;
exports.addSeconds = addSeconds;
exports.calculateMonthsDiff = calculateMonthsDiff;

exports.getFullMonth = (date) => {
    return toLocaleDate(date, { month: 'long' });
};

exports.getShortMonth = (date) => {
    return toLocaleDate(date, { month: 'short' });
};

exports.resetHours = (date) => {
    if (date) {
        date.setHours(0, 0, 0, 0);
    }

    return date;
};