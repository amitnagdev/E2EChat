'use strict';

/***********************************
 *** START ~ Module dependencies ***
 ***********************************/

// Global dependencies
const _ = require('lodash'),
    fs = require('fs'),
    path = require('path'),
    jwt = require('jsonwebtoken');  // Used to create, sign, and verify tokens

// Project dependencies
const config = require('../config')(),
    settings = require('../../settings')();


/***********************************
 *** END ~ Module dependencies ***
 ***********************************/

const createToken = (user, expires) => {
    if (expires) {
        expires = parseInt(expires);
    }

    let userDto = user;

    if(settings.userDto && fs.existsSync(path.resolve(settings.userDto))) {
        const User = require(path.resolve(settings.userDto));
        userDto = new User(user);
    }

    const token = {
        user: userDto
    };

    return signJwt(token, config.jwt.secret, expires);
};

const signJwt = (data, secret, expires) => {
    return jwt.sign(data, secret, {
        expiresIn: expires || 1200 // In seconds ~ default 20 minutes
    });
};

const verifyJwt = (token, secret, callback) => {
    // Verifies secret and checks expiry
    jwt.verify(token, secret, callback);
};

exports.createToken = (user) => {
    return createToken(user, config.jwt.expiresIn);
};

exports.createExpiredToken = (user) => {
    return createToken(user, 1);
};

exports.createShortLiveToken = (user) => {
    return createToken(user, 60);
};

exports.verifyToken = (token, callback) => {
    verifyJwt(token, config.jwt.secret, callback);
};

exports.createJwt = signJwt;
exports.verifyJwt = verifyJwt;