'use strict';

/***********************************
 *** START ~ Module dependencies ***
 ***********************************/

// Global dependencies
const http = require('http'),
    https = require('https'),
    path = require('path'),
    express = require('express'),
    morgan = require('morgan'),
    bodyParser = require('body-parser'),
    session = require('express-session'),
    compress = require('compression'),
    methodOverride = require('method-override'),
    cookieParser = require('cookie-parser'),
    MongoStore = require('connect-mongo')({
        session: session
    }),
    //flash = require('connect-flash'),
    consolidate = require('consolidate'),
    favicon = require('serve-favicon');

// Project dependencies
const middlewares = require('./middlewares'),
    helper = require('./helper'),
    ssl = require('./ssl'),
    routesProtector = require('./protect.routes'),
    errorHandler = require('./error.handler'),
    security = require('./security'),
    microservices = require('./microservices'),
    analytics = require('./analytics'),
    agenda = require('./agenda'),
    socketIO = require('./socket.io');

/***********************************
 *** END ~ Module dependencies ***
 ***********************************/

module.exports = (db, config, settings) => {
    // Initialize express app
    const app = express();

    // Middleware to process the browser request "/favicon.ico"
    if (settings.favIcon) {
        app.use(favicon(settings.favIcon));
    }

    // Start initializing the app
    app.use(middlewares.initRequest(config));

    // Globbing model files
    if (settings.modelFiles) {
        helper.getGlobbedFiles(settings.modelFiles).forEach((modelPath) => {
            require(path.resolve(modelPath));
        });
    }

    // Setting application local variables
    if(config.app) {
        app.locals.title = config.app.title;
        app.locals.description = config.app.description;
        app.locals.keywords = config.app.keywords;
    }

    if(config.facebook) {
        app.locals.facebookAppId = config.facebook.clientID;
    }

    if(config.assets) {
        app.locals.libVersion = config.assets.lib.ver;
        app.locals.jsFiles = helper.getJavaScriptAssets(config);
        app.locals.cssFiles = helper.getCSSAssets(config);
    }
    
    if (settings.customMiddleware) {
        require(path.resolve(settings.customMiddleware))(app);
    }

    // Passing the request url to environment locals
    app.use((req, res, next) => {
        res.locals.url = req.protocol + '://' + req.headers.host + req.url;
        next();
    });

    // Showing stack errors
    app.set('showStackError', true);

    // Set the template engine which can be swig etc
    if (settings.viewsExt) {
        app.engine(settings.viewsExt, consolidate[settings.viewEngine]);

        // Set views path and view engine
        app.set('view engine', settings.viewsExt);
        app.set('views', settings.viewsDir);
    }

    // Environment dependent middleware
    if (process.env.NODE_ENV === 'dev') {
        // Enable logger (morgan)
        app.use(morgan('dev'));

        // Disable views cache
        app.set('view cache', false);
    } else if (process.env.NODE_ENV === 'production') {
        app.locals.cache = 'memory';
    }

    // Request body parsing middleware should be above methodOverride
    app.use(bodyParser.urlencoded({
        limit: '50mb', 
        extended: true
    }));
    app.use(bodyParser.json({limit: '50mb'}));
    app.use(methodOverride());

    // CookieParser should be above session
    app.use(cookieParser());

    // Express MongoDB session storage
    if(db && db.connection) {
        app.use(session({
            saveUninitialized: true,
            resave: true,
            secret: config.sessionSecret,
            store: new MongoStore({
                mongooseConnection: db.connection,
                collection: config.sessionCollection
            })
        }));
    }

    // connect flash for flash messages
    //app.use(flash());

    // Secure Express headers
    security.protectHeader(app, settings);


    // Should be placed before express.static
    app.use(compress());
    // app.use(compress({
    //     filter: (req, res) => {
    //         if (req.headers['x-no-compression']) {
    //             // Don't compress responses with this request header
    //             return false;
    //         }

    //         return (/json|text|javascript|css/).test(res.getHeader('Content-Type'));
    //     },
    //     level: 9
    // }));
    
    // Setting the app router and static folder
    if (settings.staticDir) {
        app.use(express.static(path.resolve(settings.staticDir)));
    }

    // Cross origin resource sharing access
    security.cors(app, config);

    // Sanitize inputs
    app.use((req, res, next) => {
        if (req.body) {
            security.sanitize(req.body);
            security.applyBlacklist(req.body, settings);
        }

        next();
    });

    // Start analytics
    app.use(analytics.log(app, config, settings));
    analytics.registerRoute(app, settings);

    // Globbing routing files
    if (settings.routeFiles) {
        helper.getGlobbedFiles(settings.routeFiles).forEach((routePath) => {
            require(path.resolve(routePath))(app);
        });
    }

    // Globbing static data
    if (settings.staticDataFiles) {
        helper.getGlobbedFiles(settings.staticDataFiles).forEach((staticPath) => {
            require(path.resolve(staticPath))();
        });
    }

    // Handling html5 routing
    if (settings.html5RoutingPresenter) {
        let core = require(path.resolve(settings.html5RoutingPresenter));
        app.route('/*').get(core.index);
    } else if(settings.spaHtml) {
        app.route('/*').get((req, res, next) => {
            // To send html page
            res.sendFile(path.resolve(settings.spaHtml));
        });
    }

    // Initialize MicroServices
    microservices(settings);

    // Initialize NodeJS Schedule (cron-like) tasks
    agenda.start(config, settings);

    // Assume 'not found' in the error msgs is a 404. this is somewhat silly, but valid, you can do whatever you like, set properties, use instanceof etc.
    app.use((err, req, res, next) => {
        // If the error object doesn't exists
        if (!err) {
            return next();
        }

        if (res.headersSent) {
            return next(err);
        }

        // Log it
        err = errorHandler.getErrorMessage(err);

        res.error = err;

        res.status(500).send({
            error: err
        });
    });

    // Assume 404 since no middleware responded
    app.use((req, res) => {
        res.status(404).render('404', {
            url: req.originalUrl,
            error: 'Not Found'
        });
    });

    if (config.ssl && config.ssl.active) {
        // Log SSL usage
        console.log('Securely using https protocol');

        let sslOptions = ssl.getServerSettings(config, settings);

        // Create HTTPS Server
        let httpsServer = https.createServer(sslOptions, app);

        if (config.ssl.activeHttp) {
            let httpApp = http.createServer(app);
            socketIO(httpApp, settings);
            // Have it listen on 80 (or) 8080
            httpApp.listen(config.httpPort);
        } else {
            // Create HTTP Server for the redirect to HTTPS
            // Set up plain http server
            let httpApp = express();

            if (settings.httpMiddleware) {
                require(path.resolve(settings.httpMiddleware))(httpApp);
            }

            // Setting the http static folder
            if (settings.httpStaticDir) {
                httpApp.use(express.static(path.resolve(settings.httpStaticDir)));
            }

            // Set up a route to redirect http to https
            httpApp.get('*', (req, res) => {
                res.redirect('https://' + req.hostname + ':' + config.port + req.path);
            });

            // Have it listen on 80 (or) 8080
            httpApp.listen(config.httpPort);
        }

        socketIO(httpsServer, settings);

        // Return HTTPS server instance
        return httpsServer;
    }

    let httpServer = http.createServer(app);

    socketIO(httpServer, settings);

    // Return Express server instance
    return httpServer;
};