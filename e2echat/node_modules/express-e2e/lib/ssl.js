'use strict';

/***********************************
 *** START ~ Module dependencies ***
 ***********************************/

// Global dependencies
const fs = require('fs'),
    path = require('path');

// Project dependencies


/***********************************
 *** END ~ Module dependencies ***
 ***********************************/

exports.getServerSettings = (config, settings) => {
    let options = {};
    if (config && config.ssl && config.ssl.active) {
        if (settings && settings.ssl && settings.ssl.baseDir) {
            let sslDirectory = settings.ssl.baseDir + process.env.NODE_ENV + '/';

            // Load SSL key and certificate
            let privateKey = fs.readFileSync(sslDirectory + config.ssl.key, 'utf8');
            let certificate = fs.readFileSync(sslDirectory + config.ssl.cert, 'utf8');

            let caFiles = config.ssl.ca;

            let ca = (() => {
                let i, len, results;
                results = [];
                for (i = 0, len = caFiles.length; i < len; i++) {
                    let file = caFiles[i];
                    results.push(fs.readFileSync(sslDirectory + file));
                }
                return results;
            })();

            options = {
                ca: ca,
                key: privateKey,
                cert: certificate
            };
        }
    }

    return options;
};

exports.getMongoSettings = (config, settings) => {
    let options = {};
    if (config && config.ssl && config.ssl.mongo) {
        if (settings && settings.ssl && settings.ssl.mongo) {
            let sslDirectory = settings.ssl.mongo.baseDir + process.env.NODE_ENV + '/';
            let cert = fs.readFileSync(sslDirectory + settings.ssl.mongo.cert, 'utf8'),
                ca = fs.readFileSync(sslDirectory + settings.ssl.mongo.ca, 'utf8');

            options = {
                server: {
                    ssl: true,
                    sslValidate: false,
                    sslCA: [ca],
                    sslCert: cert,
                    sslKey: cert
                }
            };
        }
    }

    return options;
};