'use strict';

/***********************************
 *** START ~ Module dependencies ***
 ***********************************/

// global dependencies
const _ = require('lodash'),
    fs = require('fs-extra'),
    path = require('path'),
    crypto = require('crypto'),
    glob = require('glob'),
    chalk = require('chalk');

/***********************************
 *** END ~ Module dependencies ***
 ***********************************/

let alg = '', secretSalt = '', env = '';

const checkFileExist = (file, next) => {
    fs.stat(file, (err, stat) => {
        if (err) {
            next('File does not exist');
        } else {
            next();
        }
    });
};

const writeFile = (file, content) => {
    fs.writeFileSync(file, content);
};

const sleep = (ms) => {
    let end = new Date().getTime() + (ms / 1000);
    while (new Date().getTime() <= end) {}
};

const getPassword = (configEnvRoot, pwd) => {
    const ursa = require('ursa');
    let privateKeyFileName = path.join(configEnvRoot, 'prv.pem');
    let privatePem = ursa.createPrivateKey(fs.readFileSync(privateKeyFileName));

    return privatePem.decrypt(pwd, 'base64', 'utf8');
};

const decryptBuffer = (buffer) => {
    if (secretSalt) {
        let decipher = crypto.createDecipher(alg, secretSalt);
        let dec = Buffer.concat([decipher.update(buffer), decipher.final()]);

        return dec;
    } else {
        return null;
    }
};

const readFile = (path, dft) => {
    try {
        return require(path);
    }
    catch(e) {
        console.log(chalk.gray(e));
        return (typeof dft === 'undefined' ? {} : dft);
    }
};

let config = null;

const loadConfig = (settings) => {
    if(!config && settings) {
        env = process.env.NODE_ENV;
        alg = settings.config.cryptoAlgorithm;

        let configRoot = path.resolve(settings.config.baseDir) + '/';
        let configEnvRoot = configRoot + env + '/';
        let configEnvFile = configEnvRoot + env;

        // If config secret was set in the configuration then read it from there.
        // It can be set directly to the environment variable from the deployment (bamboo) job (or) somehow for production
        let configSecret = readFile(configEnvFile + settings.config.passwordFile, '');
        if (configSecret) {
            process.env.NODE_ENV_SECRET = process.env.NODE_ENV_SECRET || configSecret;
        }

        // If a secret exists, then use this to load the collections of environment variables
        if (process.env.NODE_ENV_SECRET) {
            // Decrypt the secret first
            secretSalt = getPassword(configEnvRoot, process.env.NODE_ENV_SECRET);

            // Read the encrypted environment variable collections from the disc
            let envFile = path.join(configEnvRoot, env + settings.config.encryptFile);
            let envData = fs.readFileSync(envFile);
            // Decrypt the environment variable collections
            let decrypted = decryptBuffer(new Buffer(envData.toString(), 'base64'));

            if (decrypted) {
                // Write the decrypted collections to the disc
                let dataFile = path.join(configEnvRoot, env + settings.config.decryptFile);
                writeFile(dataFile, decrypted);

                // Wait for 10 milli secs
                sleep(10);

                // Load data
                let envVars = readFile(dataFile);

                // Set environment variables
                Object.keys(envVars).forEach(function (key) {
                    process.env[key] = process.env[key] || envVars[key];
                });

                // Wait for 10 milli secs
                sleep(10);

                // Delete file
                fs.removeSync(dataFile);
            }
        }

        let allEnvData = readFile(configRoot + (settings.config.genericFile || ''));
        let envData = readFile(configEnvFile);

        config = _.merge(
            allEnvData,
            envData
        );
    }

    return config || {};
};

/**
 * Load app configurations
 */
module.exports = loadConfig;